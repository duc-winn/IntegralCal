//DUC NGUYEN DNN200002
import java.util.*;
import java.io.*;
public class Main
{
    public static void main(String[] args) throws IOException{
        Scanner keyboard = new Scanner(System.in);
        String filename = keyboard.next();
        FileInputStream fileObj = new FileInputStream(filename);
        Scanner fileReader = new Scanner(fileObj);


        while(fileReader.hasNext()){
            int upperLimit = 0;
            int lowerLimit = 0;
            String test = fileReader.nextLine();
            boolean isDefinite = false;  //assume the expression is false
            String expression;

            if(test.equals("")){
                System.out.println("0 + C");
                continue;
            }

            BinTree<Term> tree = new BinTree<>();

            ArrayList<Character> operators = new ArrayList<Character>();

            for(int i = 0; i < test.length(); i++){
                if(test.charAt(i) == '+' || test.charAt(i) == '-'){
                    if(test.charAt(i) == '+' && i != 0){
                        if(!(i-1 < 0) && !(test.charAt(i-1) == '^') && !(test.charAt(i-1) == '|')){
                            operators.add('+');
                        }
                    }
                    else if(test.charAt(i) == '-' && i != 0){
                        if(!(i-1 < 0) && !(test.charAt(i-1) == '^') && !(test.charAt(i-1) == '|')){  //to not confuse the negative exponent with the subtracting operator
                            operators.add('-');
                        }
                    }
                }
            }
            //test if both of the limits are positive
            if(Character.isDigit(test.charAt(0)) && Character.isDigit(test.charAt(test.indexOf('|')+1))){    //test if the integral if definite, and if so initialize the limits
                isDefinite = true;
                lowerLimit = Integer.parseInt(test.substring(0, test.indexOf('|')));
                upperLimit = Integer.parseInt(test.substring(test.indexOf('|')+1, test.indexOf(' ')));

                if(lowerLimit > upperLimit){
                    int temp = lowerLimit;
                    lowerLimit = upperLimit;
                    upperLimit = temp;
                }
            }
            //test if both limits are negative
            else if(test.charAt(0) == '-' && test.charAt(test.indexOf('|')+1) == '-'){
                isDefinite = true;
                lowerLimit = Integer.parseInt(test.substring(1, test.indexOf('|'))) * -1;
                upperLimit = Integer.parseInt(test.substring(test.indexOf('|')+2, test.indexOf(' '))) * -1;

                if(lowerLimit > upperLimit){
                    int temp = lowerLimit;
                    lowerLimit = upperLimit;
                    upperLimit = temp;
                }
            }
            else if(test.charAt(0) == '-' && Character.isDigit(test.charAt(test.indexOf('|')+1))){  //lower limit is negative and upper is positive
                isDefinite = true;
                lowerLimit = Integer.parseInt(test.substring(1, test.indexOf('|'))) * -1;
                upperLimit = Integer.parseInt(test.substring(test.indexOf('|')+1, test.indexOf(' ')));

                if(lowerLimit > upperLimit){
                    int temp = lowerLimit;
                    lowerLimit = upperLimit;
                    upperLimit = temp;
                }
            }
            else if(Character.isDigit(test.charAt(0)) && test.charAt(test.indexOf('|')+1) == '-'){   //if lower limit is positive and upper limit is negative
                isDefinite = true;
                lowerLimit = Integer.parseInt(test.substring(0, test.indexOf('|')));
                upperLimit = Integer.parseInt(test.substring(test.indexOf('|')+2, test.indexOf(' '))) * -1;

                if(lowerLimit > upperLimit){
                    int temp = lowerLimit;
                    lowerLimit = upperLimit;
                    upperLimit = temp;
                }
            }
            //only use the upper and lower limit if the expression is definite

            expression = test.substring(test.indexOf(' ')+1, test.length()-2);
            expression = expression.replace(" ", "");     //removing all unneccesry spaces in the expression
            addExpression(expression, tree, operators.size()+1);   //adding the expression to the tree

            integrateTree(tree.getRoot());    //integrating the terms

            int LargestExponent = findLargestExponent(tree.getRoot());

            if(isDefinite){  //solve the definite integral by using the upper and lower limit
                if(tree.getRoot() != null){
                    getSortedIntegratedExpression(tree.getRoot(), LargestExponent);
                    System.out.print(", " + lowerLimit + "|" + upperLimit + " = ");
                    double upperExpression = getValueExpression(tree.getRoot(), upperLimit);
                    double lowerExpression = getValueExpression(tree.getRoot(), lowerLimit);

                    System.out.printf("%.3f", (upperExpression - lowerExpression));
                    System.out.println();

                }
            }
            else if(!(isDefinite)){     //indefinite integral
                if(tree.getRoot() != null){
                    getSortedIntegratedExpression(tree.getRoot(), LargestExponent);
                }
                if(tree.getRoot() != null){
                    System.out.println("+ C");
                }
            }
        }
        //USE Character.isDitgit() to check for limit of integral(if definite)
        fileObj.close();
    }

    public static double getValueExpression(Node<Term> currNode, int limit){      //get the value of the expression with the corresponding limit plug in
        if(currNode == null){
            return 0.0;
        }
        return (1.0*(currNode.obj.getCoefficient()/(1.0*currNode.obj.getExponent())) * (1.0*Math.pow(limit, currNode.obj.getExponent()))) + getValueExpression(currNode.left, limit) + getValueExpression(currNode.right, limit);
    }

    public static void getSortedIntegratedExpression(Node<Term> currNode, int LargestExponent){      //either positive or negative term
        if(currNode == null){
            return;
        }
        if(currNode.right != null){
            getSortedIntegratedExpression(currNode.right, LargestExponent);
        }

        ////////////////////// CALCULATING THE TERM //////////////////////////////////////////////////////////////
        if((1.0*currNode.obj.getCoefficient() / currNode.obj.getExponent()) > 0){    //term is now positive
            if(currNode.obj.getExponent() == LargestExponent){     //highest order term check
                if((currNode.obj.getCoefficient() % currNode.obj.getExponent())== 0){ //if new coefficient is a whole number
                    if(currNode.obj.getCoefficient() % currNode.obj.getExponent() != 1){
                        System.out.print(currNode.obj.getCoefficient() / currNode.obj.getExponent());
                    }
                }
                else{                 //if new coefficient is a fraction
                    int GCD = greatestCommonDenominator(currNode.obj.getCoefficient(), currNode.obj.getExponent());
                    System.out.print("(" + Math.abs(currNode.obj.getCoefficient() / GCD) + "/" + Math.abs(currNode.obj.getExponent() / GCD) + ")");
                }

                if(currNode.obj.getExponent() == 1){
                    System.out.print("x ");
                }
                else if(currNode.obj.getExponent() > 1 || currNode.obj.getExponent() < 0){
                    System.out.print("x^" + currNode.obj.getExponent() + " ");
                }
            }
            else{    //terms following the highest term (has + or - in front)
                if(currNode.obj.getCoefficient() % currNode.obj.getExponent() == 0){ //if new coefficient is a whole number
                    System.out.print("+ ");
                    if(currNode.obj.getCoefficient() / currNode.obj.getExponent() != 1){   //no need to print 1 if result of coe/expo == 1
                        System.out.print(currNode.obj.getCoefficient() / currNode.obj.getExponent());
                    }
                }
                else{                 //if new coefficient is a fraction
                    int GCD = greatestCommonDenominator(currNode.obj.getCoefficient(), currNode.obj.getExponent());
                    System.out.print("+ (" + Math.abs(currNode.obj.getCoefficient() / GCD) + "/" + Math.abs(currNode.obj.getExponent() / GCD) + ")");
                }

                if(currNode.obj.getExponent() == 1){
                    System.out.print("x ");
                }
                else if(currNode.obj.getExponent() > 1 || currNode.obj.getExponent() < 0){
                    System.out.print("x^" + currNode.obj.getExponent() + " ");
                }
            }
        }
        else if((1.0*currNode.obj.getCoefficient() / currNode.obj.getExponent()) < 0){   //term is negative
            if(currNode.obj.getExponent() == LargestExponent){    //checking for the highest term
                if(currNode.obj.getCoefficient() % currNode.obj.getExponent() == 0){ //if new coefficient is a whole number
                    if(currNode.obj.getCoefficient() / currNode.obj.getExponent() != -1){ //FIX LATER MAY CAUSE BUG
                        System.out.print(currNode.obj.getCoefficient() / currNode.obj.getExponent());
                    }
                }
                else{                 //if new coefficient is a fraction
                    int GCD = greatestCommonDenominator(currNode.obj.getCoefficient(), currNode.obj.getExponent());
                    System.out.print("(-" + Math.abs(currNode.obj.getCoefficient() / GCD) + "/" + Math.abs(currNode.obj.getExponent() / GCD) + ")");     //only the first fraction has the negative inside
                }                                                                                                                             //the rest will be on the outside
                //1st) (-a/b)    2nd) - (a/b)
                if(currNode.obj.getExponent() == 1){
                    if(currNode.obj.getCoefficient() / currNode.obj.getExponent() == -1){
                        System.out.print("-x ");
                    }
                    else{
                        System.out.print("x ");
                    }
                }
                else if(currNode.obj.getExponent() > 1 || currNode.obj.getExponent() < 0){
                    if(currNode.obj.getCoefficient() / currNode.obj.getExponent() == -1){
                        System.out.print("-x^" + currNode.obj.getExponent() + " ");
                    }
                    else{
                        System.out.print("x^" + currNode.obj.getExponent() + " ");
                    }
                }
            }
            else{  //the terms that follows the highest term
                if(currNode.obj.getCoefficient() % currNode.obj.getExponent() == 0){ //if new coefficient is a whole number
                    System.out.print("- ");
                    if(currNode.obj.getCoefficient() / currNode.obj.getExponent() != -1){   //no need to print 1 if result of coe/expo == 1
                        System.out.print(Math.abs(currNode.obj.getCoefficient() / currNode.obj.getExponent()));
                    }
                }
                else{                 //if new coefficient is a fraction
                    int GCD = greatestCommonDenominator(currNode.obj.getCoefficient(), currNode.obj.getExponent());
                    System.out.print("- (" + Math.abs(currNode.obj.getCoefficient() / GCD) + "/" + Math.abs(currNode.obj.getExponent() / GCD) + ")");  //TESTING MIGHT HAVE TO FIX
                }

                if(currNode.obj.getExponent() == 1){
                    System.out.print("x ");
                }
                else if(currNode.obj.getExponent() > 1 || currNode.obj.getExponent() < 0){
                    System.out.print("x^" + currNode.obj.getExponent() + " ");
                }
            }
        }

        //////////////////////////// FINISH CALCULATING THE TERM ///////////////////////////////////////////

        if(currNode.left != null){
            getSortedIntegratedExpression(currNode.left, LargestExponent);
        }
        return;
    }

    public static void integrateTree(Node<Term> currNode){  //recursive
        if(currNode == null){
            //traverse the tree and increment the exponent
            return;
        }
        else if(currNode.left != null){
            integrateTree(currNode.left);
        }
        currNode.obj.setExponent(currNode.obj.getExponent() + 1);
        if(currNode.right != null){
            integrateTree(currNode.right);
        }
        return;
    }

    public static boolean isOperator(char currChar){    //check if the character passed in is either an addition or subtraction operator
        if(currChar == '+' || currChar == '-'){
            return true;
        }
        return false;
    }

    public static int findLargestExponent(Node<Term> currNode){       //traverse the tree and return the highest exponent of a term
        if(currNode == null){
            return 0;
        }
        if(currNode.right != null){
            return findLargestExponent(currNode.right);
        }
        return currNode.obj.getExponent();
    }

    public static void addExpression(String expression, BinTree<Term> tree, int numTerm){    //also do duplicate exponent checking
        int termAdded = 0;
        String term = "";
        int coefficient = Integer.MIN_VALUE;
        int exponent = Integer.MIN_VALUE;
        if(expression.charAt(0) == '-'){
            numTerm--;
        }
        while(termAdded < numTerm-1){          //only adding term -1, so add the last term manually, and also do a duplicate check on it
            boolean sameExponent = false;

            for(int i = 0; i < expression.length(); i++){
                if(isOperator(expression.charAt(i)) && (i != 0) && expression.charAt(i-1) != '^'){  //include the operator when initializing the term(determine if it's positive or negative)
                    term = expression.substring(0, i);
                    expression = expression.substring(i);
                    break;
                }
            }
            //System.out.println(term);
            if(!(term.contains("x")) && !(term.contains("^"))){  //if the term is just a constant
                if(term.charAt(0) == '-'){
                    coefficient = Integer.parseInt(term.substring(1)) * -1;   //negative coefficient
                }
                else{
                    coefficient = Integer.parseInt(term);         //positive coefficient
                }
                exponent = 0;
            }
            else if(term.contains("x") && !(term.contains("^"))){   //if the term only has a coefficient and 'x'
                if(term.charAt(0) == 'x' || (term.charAt(1) == 'x' && term.charAt(0) == '-') || (term.charAt(1) == 'x' && term.charAt(0) == '+')){
                    if(term.charAt(0) == 'x'){
                        coefficient = 1;
                    }
                    else if(term.charAt(1) == 'x' && term.charAt(0) == '-'){
                        coefficient = -1;
                    }
                    else if(term.charAt(1) == 'x' && term.charAt(0) == '+'){
                        coefficient = 1;
                    }
                }
                else{
                    if(term.charAt(0) == '-'){
                        coefficient = Integer.parseInt(term.substring(1, term.indexOf('x'))) * -1;   //negative coefficient
                    }
                    else{
                        coefficient = Integer.parseInt(term.substring(0, term.indexOf('x')));         //positive coefficient
                    }
                }
                exponent = 1;
            }
            else if(term.contains("x") && term.contains("^")){   //if the term has coefficient, 'x', and exponent
                if(term.charAt(0) == 'x' || (term.charAt(1) == 'x' && term.charAt(0) == '-') || (term.charAt(1) == 'x' && term.charAt(0) == '+')){
                    if(term.charAt(0) == 'x'){
                        coefficient = 1;
                    }
                    else if(term.charAt(1) == 'x' && term.charAt(0) == '-'){
                        coefficient = -1;
                    }
                    else if(term.charAt(1) == 'x' && term.charAt(0) == '+'){
                        coefficient = 1;
                    }
                }
                else{
                    if(term.charAt(0) == '-'){
                        coefficient = Integer.parseInt(term.substring(1, term.indexOf('x'))) * -1; //positive coefficient
                    }
                    else{
                        coefficient = Integer.parseInt(term.substring(0, term.indexOf('x')));
                    }
                }
                if(term.charAt(term.indexOf('^') + 1) == '-'){     //negative exponent
                    exponent = Integer.parseInt(term.substring(term.indexOf('^') + 2)) * -1;
                }
                else{
                    exponent = Integer.parseInt(term.substring(term.indexOf('^') + 1));
                }
            }
            //System.out.println(coefficient);
            Term termObj = new Term(coefficient, exponent);
            Node<Term> nodeObj = new Node<Term>(termObj);
            if(tree.Search(tree.getRoot(), nodeObj) == true){     //if the tree is searched and found a term with the same exponent
                updateTerm(tree, tree.getRoot(), nodeObj);  //update the tree instead of adding a new term
            }
            else{
                tree.insertNode(nodeObj);
            }
            termAdded++;
        }
        term = expression;       //manually adding the last term
        if(!(term.contains("x")) && !(term.contains("^"))){  //if the term is just a constant
            if(term.charAt(0) == '-'){
                coefficient = Integer.parseInt(term.substring(1)) * -1;   //negative coefficient
            }
            else{
                coefficient = Integer.parseInt(term);         //positive coefficient
            }
            exponent = 0;
        }
        else if(term.contains("x") && !(term.contains("^"))){   //if the term only has a coefficient and 'x'
            if(term.charAt(0) == 'x' || (term.charAt(1) == 'x' && term.charAt(0) == '-') || (term.charAt(1) == 'x' && term.charAt(0) == '+')){
                if(term.charAt(0) == 'x'){
                    coefficient = 1;
                }
                else if(term.charAt(1) == 'x' && term.charAt(0) == '-'){
                    coefficient = -1;
                }
                else if(term.charAt(1) == 'x' && term.charAt(0) == '+'){
                    coefficient = 1;
                }
            }
            else{
                if(term.charAt(0) == '-'){
                    coefficient = Integer.parseInt(term.substring(1, term.indexOf('x'))) * -1;   //negative coefficient
                }
                else{
                    coefficient = Integer.parseInt(term.substring(0, term.indexOf('x')));         //positive coefficient
                }
            }
            exponent = 1;
        }
        else if(term.contains("x") && term.contains("^")){   //if the term has coefficient, 'x', and exponent
            if(term.charAt(0) == 'x' || (term.charAt(1) == 'x' && term.charAt(0) == '-') || (term.charAt(1) == 'x' && term.charAt(0) == '+')){
                if(term.charAt(0) == 'x'){
                    coefficient = 1;
                }
                else if(term.charAt(1) == 'x' && term.charAt(0) == '-'){
                    coefficient = -1;
                }
                else if(term.charAt(1) == 'x' && term.charAt(0) == '+'){
                    coefficient = 1;
                }
            }
            else{
                if(term.charAt(0) == '-'){
                    coefficient = Integer.parseInt(term.substring(1, term.indexOf('x'))) * -1; //negative coefficient
                }
                else{
                    coefficient = Integer.parseInt(term.substring(0, term.indexOf('x')));
                }
            }
            if(term.charAt(term.indexOf('^') + 1) == '-'){     //negative exponent
                exponent = Integer.parseInt(term.substring(term.indexOf('^') + 2)) * -1;
            }
            else{
                exponent = Integer.parseInt(term.substring(term.indexOf('^') + 1));
            }
        }
        Term termObj = new Term(coefficient, exponent);
        Node<Term> nodeObj = new Node<Term>(termObj);      //start searching for terms with duplicate exponent here
        if(tree.Search(tree.getRoot(), nodeObj) == true){     //if the tree is searched and found a term with the same exponent
            updateTerm(tree, tree.getRoot(), nodeObj);
        }
        else{
            tree.insertNode(nodeObj);
        }
    }

    public static int greatestCommonDenominator(int coefficient, int exponent){
        if(exponent == 0){
            return coefficient;
        }
        return greatestCommonDenominator(exponent, coefficient % exponent);
    }

    public static void updateTerm(BinTree<Term> tree, Node<Term> currNode, Node<Term> sameTerm){    //updating the term with the same exponent
        if(sameTerm.obj.getExponent() > currNode.obj.getExponent()){
            updateTerm(tree, currNode.right, sameTerm);
        }
        else if(sameTerm.obj.getExponent() < currNode.obj.getExponent()){
            updateTerm(tree, currNode.left, sameTerm);
        }
        else if(sameTerm.obj.getExponent() == currNode.obj.getExponent()){
            currNode.obj.setCoefficient(currNode.obj.getCoefficient() + sameTerm.obj.getCoefficient());
            if(currNode.obj.getCoefficient() == 0){      //the coefficient is zero, remove it from the tree
                tree.Delete(currNode);
            }
        }

    }
}
